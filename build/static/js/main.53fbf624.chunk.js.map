{"version":3,"sources":["api/index.js","styles/modules/variables.js","components/Card/Card.js","screens/HomeScreen/HomeScreen.js","components/App.js","serviceWorker.js","index.js"],"names":["BASE_URL","concat","getMovies","axios","create","baseURL","crossDomain","timeout","headers","Content-Type","Accept","Access-Control-Allow-Origin","Access-Control-Allow-Methods","Access-Control-Allow-Headers","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","movies","wrap","_context","prev","next","then","res","data","results","sent","console","log","abrupt","stop","apply","this","arguments","size","device","mobile","tablet","laptop","MovieCard","styled","div","_templateObject","MoviePoster","_templateObject2","PosterImg","img","_templateObject3","MovieContents","_templateObject4","Synopsis","_templateObject5","Title","h1","_templateObject6","Card","props","react_default","createElement","className","src","item","poster_path","alt","title","lib_default","text","overview","maxLine","ellipsis","trimRight","basedOn","Wrapper","HomeScreen_templateObject","HomeScreen","map","prop","components_Card_Card","key","id","Center","App_templateObject","App","_useState","useState","_useState2","slicedToArray","setMovies","useEffect","m","t0","getMoviesList","undefined","length","screens_HomeScreen_HomeScreen","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.53fbf624.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_KEY = `a3e763a37360726637c5723d64ed797a`\nexport const BASE_URL = `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US`;\n\nexport const API = axios.create({\n  baseURL: BASE_URL,\n  crossDomain: true,\n  timeout: 3000,\n  headers: {\n    \"Content-Type\": 'application/json;charset=utf-8',\n    'Accept': 'application/json',\n    \"Access-Control-Allow-Origin\" : `*`,\n    'Access-Control-Allow-Methods': `*`,\n    'Access-Control-Allow-Headers': `*`\n  }\n});\n\n\nexport const getMovies = async () => {\n  const movies = await axios(BASE_URL).then(res => res.data.results )\n  console.log('moo..', movies);\n  return movies;\n};\n","\nconst size = {\n  mobile: `320px`,\n  tablet: `768px`,\n  laptop: `1024px`\n}\nexport const device = {\n  mobile: `min-width:${size.mobile}`,\n  tablet: `min-width:${size.tablet}`,\n  laptop: `min-width:${size.laptop}`,\n}\n","import React from \"react\";\nimport styled from 'styled-components';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport {device} from \"../../styles/modules/variables\";\n\nconst Card = props => {\n  return (\n    <MovieCard className=\"MovieCard\">\n      <MoviePoster>\n        <PosterImg src={`https://image.tmdb.org/t/p/w300`+props.item.poster_path } alt={props.item.title +`poster image`}></PosterImg>\n      </MoviePoster>   \n      <MovieContents >\n        <Title>{props.item.title}</Title>\n        <Synopsis>\n          <LinesEllipsis\n            text={props.item.overview}\n            maxLine='3'\n            ellipsis='...'\n            trimRight\n            basedOn='letters'\n            />   \n        </Synopsis>\n      </MovieContents>\n    </MovieCard>\n  )\n}\n\nconst MovieCard = styled.div`\n  background-color:#fff;\n  display: flex;\n  justify-content: space-between;\n  align-items:flex-start;\n  flex-wrap:wrap;\n  flex-flow:row;\n  padding:0 20px;\n  box-shadow: 0 8px 38px rgba(133, 133, 133, 0.3), 0 5px 12px rgba(133, 133, 133,0.22);\n  border-radius: 3px;\n  border: 2px solid #eee;\n  color: #333;\n  margin: 0 1em 50px;\n  width: 100%;\n  @media (${device.tablet}) {\n    width: calc(50% - 6em);\n  }\n`\n\nconst MoviePoster = styled.div`\n  width:20%;\n  box-sizing:border-box;\n  max-width: 100%;\n  position: relative;\n  top:-20px;\n  box-shadow: -10px 19px 38px rgba(83, 83, 83, 0.3), 10px 15px 12px rgba(80,80,80,0.22);\n`\n\nconst PosterImg = styled.img`\n  display:block;\n  width:100%;\n`\nconst MovieContents = styled.div`\n  padding:20px;\n  width:80%;box-sizing:borer-box;\n`\n\nconst Synopsis = styled.div`\n  font-size:14px;\n  line-height:20px;\n  min-height:60px;\n  overflow:hidden;\n`\n\nconst Title = styled.h1`\n  font-size: 18px;\n  line-height:30px;\n  margin-bottom:20px;\n  font-weight:bold;\n`\nexport default Card;","import React from 'react';\nimport Card from \"../../components/Card\";\nimport styled from 'styled-components';\n\nconst HomeScreen = props => {\n  return (\n    <Wrapper>\n      {props.movies.map(prop => <Card key={prop.id} item={prop}></Card>)}\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  display:flex;\n  flex-flow:row wrap;\n  justify-content: space-between;\n  align-items: stretch;\n  padding-top:30px;\n`\nexport default HomeScreen;","import React, {useState, useEffect} from 'react';\nimport {getMovies} from '../api';\nimport HomeScreen from \"../screens/HomeScreen\";\nimport styled from \"styled-components\";\n\n\nconst App = () => {\n  let [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const getMoviesList = async () => {\n      try {\n        let m = await getMovies();\n        setMovies(m);\n      }catch (err) {\n        console.log('err', err)\n      }\n      \n    };\n    getMoviesList();\n\n  }, []);\n  return (\n    <div className=\"App\">\n      {movies !== undefined && movies.length > 0 ? <HomeScreen movies={movies}></HomeScreen> : <Center>Loading...</Center> }\n    </div>\n  )\n}\n\nconst Center = styled.div`\n  text-align:center;\n  height:100vh;\n  line-height:100vh;\n`\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/app.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}